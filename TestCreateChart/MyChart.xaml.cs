using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Shapes;

namespace TestCreateChart
{
    /// <summary>
    /// Interaction logic for MyChart.xaml
    /// </summary>
    public partial class MyChart
    {
        public ObservableCollection<ChartAxisItem> YAxisItems { get; } = new ObservableCollection<ChartAxisItem>();

        /// <summary>
        /// Interval for which Labels for the YAxis Should be rendered when AutoGenerateYAxisItems is true
        /// </summary>
        public double YAxisItemInterval { get; set; } = 100;

        public bool AutoGenerateYAxisItems { get; set; } = true;

        public int MinYValue { get; set; }

        public int MaxYValue { get; set; }

        public int MinXValue { get; set; }

        public int MaxXValue { get; set; }

        public double HeaderMarginPercentage { get; set; } = .05;

        public double FooterMarginMarginPercentage { get; set; } = .05;

        public double YAxisLineInterval { get; set; } = 50;

        public MyChart()
        {
            InitializeComponent();
            ChartCanvas.SizeChanged += ChartCanvas_SizeChanged;
            YAxisItems.CollectionChanged += YAxisItems_CollectionChanged;
        }

        private void YAxisItems_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            foreach (ChartAxisItem chartAxisItem in e.NewItems)
            {
                chartAxisItem.SizeChanged += (o, args) =>
                {
                  SetYAxisItemPosition((ChartAxisItem)o);
                };
            }
        }

        private void DrawHorizontalLines()
        {
            ClearLines();

            for (double i = MinYValue; i <= MaxYValue; i += YAxisLineInterval)
            {
                var line = new Line
                {
                    X1 = 0,
                    Y1 = ConvertYValueToYCoordinate(i),
                    X2 = ChartCanvas.ActualWidth,
                    Y2 = ConvertYValueToYCoordinate(i)
                };

                ChartCanvas.Children.Add(line);
            }
        }

        private double GetStartPixel()
        {
            return ChartCanvas.ActualHeight - GetFooterPixelMargin();
        }

        private double GetTotalHeightMinusMargins()
        {
            return ChartCanvas.ActualHeight - GetHeaderPixelMargin() - GetFooterPixelMargin();
        }

        private double GetHeaderPixelMargin()
        {
            return ChartCanvas.ActualHeight * HeaderMarginPercentage;
        }

        private double GetFooterPixelMargin()
        {
            return ChartCanvas.ActualHeight * FooterMarginMarginPercentage;
        }

        private void ClearLines()
        {
            for (int childIndex = ChartCanvas.Children.Count - 1; childIndex >= 0; childIndex--)
            {
                if (ChartCanvas.Children[childIndex] is Line line)
                {
                    ChartCanvas.Children.Remove(line);
                }
            }
        }
        
        private double ConvertYValueToYCoordinate(double atYValue)
        {
            return GetStartPixel() - (atYValue / MaxYValue * GetTotalHeightMinusMargins());
        }

        private void ChartCanvas_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            DrawHorizontalLines();
            DrawYAxisItems();
            DrawAutoGeneratedYAxisItems();
        }

        private void DrawAutoGeneratedYAxisItems()
        {
            if (!AutoGenerateYAxisItems)
            {
                return;
            }

            for (double i = MinYValue; i <= MaxYValue; i += YAxisItemInterval)
            {
                var chartAxisItem = new ChartAxisItem { Value = i};
                YLabelCanvas01.Children.Add(chartAxisItem);

                chartAxisItem.SizeChanged += (o, args) =>
                {
                    SetYAxisItemPosition((ChartAxisItem)o);
                };
            }
        }

        private void DrawYAxisItems()
        {
            YLabelCanvas01.Children.Clear();

            foreach (ChartAxisItem chartAxisItem in YAxisItems)
            {
                YLabelCanvas01.Children.Add(chartAxisItem);
                SetYAxisItemPosition(chartAxisItem);
            }
        }

        private void SetYAxisItemPosition(ChartAxisItem chartAxisItem)
        {
            Canvas.SetTop(chartAxisItem, Math.Round(ConvertYValueToYCoordinate(chartAxisItem.Value) - chartAxisItem.ActualHeight / 1.95));
            Canvas.SetLeft(chartAxisItem, YLabelCanvas01.ActualWidth / 2.0 - chartAxisItem.ActualWidth / 2.0);
        }
    }
}
